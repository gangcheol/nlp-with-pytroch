{
  
    
        "post0": {
            "title": "Chapter 2. NLP 기술 빠르게 훑어보기",
            "content": "&#47568;&#47945;&#52824;, &#53664;&#53360;, &#53440;&#51077; . &#47568;&#47945;&#52824; . 고전이나 현대의 모든 NLP 작업에서 쓰이는 text data 샘플 : metadata + text | 위 같은 샘플들이 모인 데이터 셋을 말뭉치라고 표현한다, | . | . &#53664;&#53360;&#54868; (Tokenization) . 토큰 : 문법적으로 더 이상 나눌 수 없는 언어 요소 | . 텍스트를 토큰으로 나누는 과정 | . &#53076;&#46300; 2-1 . 아래의 코드는 텍스트 처리 분야에 널리 사용되는 패키지인 spacy, NLTK 의 예시이다. | . import spacy . nlp = spacy.load(&quot;en_core_web_sm&quot;) text = &quot;Mary, don&#39;t slap the green witch&quot; print( [str(token) for token in nlp(text.lower())] ) . [&#39;mary&#39;, &#39;,&#39;, &#39;do&#39;, &#34;n&#39;t&#34;, &#39;slap&#39;, &#39;the&#39;, &#39;green&#39;, &#39;witch&#39;] . from nltk.tokenize import TweetTokenizer . tweet = u&quot;Snow White and the Seven Degrees #MakeaMoviecold@midnight:-)&quot; . tokenizer = TweetTokenizer() . spacy 와 nltk 비교 | . print( tokenizer.tokenize(tweet.lower())) . [&#39;snow&#39;, &#39;white&#39;, &#39;and&#39;, &#39;the&#39;, &#39;seven&#39;, &#39;degrees&#39;, &#39;#makeamoviecold&#39;, &#39;@midnight&#39;, &#39;:-)&#39;] . print( [str(token) for token in nlp(tweet.lower())] ) . [&#39;snow&#39;, &#39;white&#39;, &#39;and&#39;, &#39;the&#39;, &#39;seven&#39;, &#39;degrees&#39;, &#39;#&#39;, &#39;makeamoviecold@midnight:-&#39;, &#39;)&#39;] . &#53440;&#51077; . 말뭉치에 등장하는 고유한 토큰 | . 말뭉치에 있는 모든 타입의 집합이 어휘 사전 또는 어휘(lexicon)이다. | . $ divideontimes$ 특성 공학 : 언어학을 이해하고 NLP 문제 해결에 적용하는 과정 . N-gram . 텍스트에 있는 고정 길이 (n)의 연속된 토큰 시퀀스이다. | . &#53076;&#46300; 2-2 . def n_gram(text,n) : return [ text [i:i+n] for i in range(len(text)-n+1)] . cleaned = [&quot;marry&quot;, &quot;,&quot;,&quot;n&#39;t&quot;, &quot;slap&quot;, &quot;green&quot;, &quot;witch&quot;,&quot;,&quot;] . print(n_gram(cleaned,3)) . [[&#39;marry&#39;, &#39;,&#39;, &#34;n&#39;t&#34;], [&#39;,&#39;, &#34;n&#39;t&#34;, &#39;slap&#39;], [&#34;n&#39;t&#34;, &#39;slap&#39;, &#39;green&#39;], [&#39;slap&#39;, &#39;green&#39;, &#39;witch&#39;], [&#39;green&#39;, &#39;witch&#39;, &#39;,&#39;]] . 부분 단어 자체가 유용한 정보를 전달한다면 문자 $n-gram$을 생성할 수 있음 | . example :methanol의 methan 탄소 화합물, 접미사 -ol 은 알코올 종류를 나타낸다. 이 같은 경우 2-gram 으로 생각할 수 있지만 유기 화합물 이름을 구분하는 작업에서는 토큰 하나로 취급할 수 있다. . &#54364;&#51228;&#50612;&#50752; &#50612;&#44036; . &#54364;&#51228;&#50612; . 표제어 : 단어의 기본형 또는 사전에 등재된 단어 fly : flow, flew, flies, flown, flowing 의 표제어 | 토큰을 표제어로 바꾸어 벡터 표현의 차원을 줄이는 방법도 종종 도움이 된다. | . | . spacy는 사전에 정의된 WordNet 사전을 이용해 표제어를 추출한다. | . import spacy nlp = spacy.load(&quot;en_core_web_sm&quot;) doc = nlp(&quot;he was running late&quot;) for token in doc : print (&quot;{} --&gt; {}&quot;.format(token, token.lemma_)) . he --&gt; -PRON- was --&gt; be running --&gt; run late --&gt; late . &#50612;&#44036;(Stemming) . 어형변화의 기초가 되는 부분 | . Porter와 Snowball어간 추출기가 유명하다. | . &#53076;&#46300; 2-3 . import nltk from nltk.stem.porter import * . stemmer = PorterStemmer() tokens = [&#39;compute&#39;, &#39;computer&#39;, &#39;computed&#39;, &#39;computing&#39;] for token in tokens: print(token + &#39; --&gt; &#39; + stemmer.stem(token)) . compute --&gt; comput computer --&gt; comput computed --&gt; comput computing --&gt; comput . &#54408;&#49324; &#53468;&#44613; . &#53076;&#46300; 2-4 . import spacy nlp = spacy.load(&quot;en_core_web_sm&quot;) doc = nlp(u&quot;Mary, don&#39;t slap the green witch&quot;) for token in doc : print (&quot;{} --&gt; {}&quot;.format(token, token.pos_)) . Mary --&gt; PROPN , --&gt; PUNCT do --&gt; VERB n&#39;t --&gt; ADV slap --&gt; VERB the --&gt; DET green --&gt; ADJ witch --&gt; NOUN . &#52397;&#53356;&#45208;&#45572;&#44592; = &#48512;&#48516; &#44396;&#47928; &#48516;&#49437; . Chunking, shallow parsing | . 청크 : 하나의 의미가 있는 말 덩어리 (여러 토큰들이 모여 청크가 될 수 있다고 생각하자) | . 연속된 여러 토큰으로 구분되는 텍스트 구에 레이블을 할당하는 작업 | . 다음은 명사구(NP) 부분 구문 분석결과이다. | . &#53076;&#46300; 2-5 . import spacy nlp = spacy.load(&quot;en_core_web_sm&quot;) doc = nlp(u&quot;Marry slapped the green witch.&quot;) for chunk in doc.noun_chunks : print (&quot;{} --&gt; {}&quot;.format(chunk, chunk.label_)) . Marry --&gt; NP the green witch --&gt; NP .",
            "url": "https://gangcheol.github.io/nlp-with-pytroch/python/2021/01/04/Chapter-2.-NLP-%EA%B8%B0%EC%88%A0-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%9B%91%EC%96%B4%EB%B3%B4%EA%B8%B0.html",
            "relUrl": "/python/2021/01/04/Chapter-2.-NLP-%EA%B8%B0%EC%88%A0-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%ED%9B%91%EC%96%B4%EB%B3%B4%EA%B8%B0.html",
            "date": " • Jan 4, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gangcheol.github.io/nlp-with-pytroch/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "github . github . soundcloud . C.I.C .",
          "url": "https://gangcheol.github.io/nlp-with-pytroch/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gangcheol.github.io/nlp-with-pytroch/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}